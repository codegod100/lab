import { Button, VerticalBox, AboutSlint, Slider, SpinBox, LineEdit, GroupBox } from "std-widgets.slint";

// Custom styled input field
component StyledInput inherits Rectangle {
    in-out property <string> text;
    in property <string> placeholder-text;
    in property <bool> enabled: true;
    property <bool> has-focus: false;

    height: 20px;
    border-radius: 6px;
    background: #ffffff;
    border-width: 1px;
    border-color: has-focus ? #6a5acd : #cccccc;
    drop-shadow-offset-x: 0px;
    drop-shadow-offset-y: has-focus ? 2px : 0px;
    drop-shadow-blur: has-focus ? 4px : 0px;
    drop-shadow-color: #6a5acd40;
    animate border-color { duration: 200ms; }
    animate drop-shadow-offset-y { duration: 200ms; }
    animate drop-shadow-blur { duration: 200ms; }

    input := TextInput {
        property <bool> empty: self.text == "";
        x: 10px;
        width: parent.width - 20px;
        height: parent.height;
        text <=> root.text;
        enabled: root.enabled;
        font-size: 14px;
        color: #333333;
        selection-foreground-color: white;
        selection-background-color: #6a5acd80;
    }

    // Update focus state
    states [
        has-focus when input.has-focus: {}
    ]

    if (input.empty && !input.has-focus): Text {
        x: 10px;
        y: 0;
        width: parent.width - 20px;
        height: parent.height;
        text: root.placeholder-text;
        color: #999999;
        font-size: 14px;
        vertical-alignment: center;
    }
}

// Custom cute button component
component CuteButton inherits Rectangle {
    callback clicked;
    in property <string> text;
    in property <brush> bg: #ffb6c1;
    in property <brush> hover-bg: #ff99b3;
    in property <brush> pressed-bg: #ff8da6;

    height: 36px;
    width: 120px;
    background: ta.pressed ? pressed-bg : ta.has-hover ? hover-bg : bg;
    border-radius: 18px;
    animate background { duration: 200ms; }

    Text {
        text: root.text;
        font-size: 14px;
        color: #ffffff;
        font-weight: 600;
    }

    ta := TouchArea {
        clicked => { root.clicked() }
    }
}

// Feed button component
component FeedButton inherits CuteButton {
    text: "Feed";
    bg: #ff9999;
    callback feed-pet;
    clicked => { feed-pet() }
}

// Play button component
component PlayButton inherits CuteButton {
    text: "Play";
    bg: #99ccff;
    callback play-with-pet;
    clicked => { play-with-pet() }
}

// Sleep button component
component SleepButton inherits CuteButton {
    text: "Sleep";
    bg: #cc99ff;
    callback put-to-sleep;
    clicked => { put-to-sleep() }
}

// Main application window
export component Demo inherits Window {
    title: "Cute Pet App";
    width: 500px;
    height: 500px;
    background: #f8f8ff;

    property <string> pet-name: "Fluffy";
    property <float> happiness: 50;
    property <string> message: "Hello! I'm " + pet-name;
    property <bool> is-dancing: false;

    VerticalLayout {
        padding: 24px;
        spacing: 16px;

        // Title
        Text {
            text: "My Virtual Pet";
            font-size: 24px;
            font-weight: 700;
            horizontal-alignment: center;
            color: #4a3c8c;
        }

        // Pet display area
        Rectangle {
            height: 180px;
            border-radius: 16px;
            background: #ffffff;
            drop-shadow-offset-x: 0px;
            drop-shadow-offset-y: 2px;
            drop-shadow-blur: 6px;
            drop-shadow-color: #00000020;

            VerticalLayout {
                padding: 16px;
                spacing: 12px;
                alignment: center;

                HorizontalLayout {
                    alignment: center;

                    // Container for animation
                    Rectangle {
                        width: 120px;
                        height: 120px;
                        background: transparent;

                        // Pet face (simple circle with eyes)
                        Rectangle {
                            width: 120px;
                            height: 120px;
                            border-radius: 60px;
                            background: #ffcc99;
                            x: is-dancing ? 10px : 0px;
                            animate x { duration: 1s; easing: ease-in-out; }

                        // Left eye
                        Rectangle {
                            x: 30px;
                            y: 40px;
                            width: 16px;
                            height: is-dancing ? 8px : 16px;
                            border-radius: 8px;
                            background: #333333;
                            animate height { duration: 300ms; }
                        }

                        // Right eye
                        Rectangle {
                            x: 74px;
                            y: 40px;
                            width: 16px;
                            height: is-dancing ? 8px : 16px;
                            border-radius: 8px;
                            background: #333333;
                            animate height { duration: 300ms; }
                        }

                        // Smile
                        Path {
                            x: 36px;
                            y: 70px;
                            width: 48px;
                            height: 20px;
                            commands: "M 0 0 C 16 20 32 20 48 0";
                            stroke: #333333;
                            stroke-width: 3px;
                        }
                    }
                    }
                }

                Text {
                    text: message;
                    font-size: 16px;
                    font-weight: 500;
                    color: #222222;
                    horizontal-alignment: center;
                }
            }
        }

        // Pet controls
        Rectangle {
            border-radius: 8px;
            background: #f0f0f0;
            drop-shadow-offset-x: 0px;
            drop-shadow-offset-y: 1px;
            drop-shadow-blur: 4px;
            drop-shadow-color: #00000020;

            Text {
                x: 12px;
                y: 8px;
                text: "Pet Controls";
                font-weight: 700;
                color: #4a3c8c;
                font-size: 16px;
            }
            vertical-stretch: 0;

            VerticalLayout {
                padding-left: 16px;
                padding-right: 16px;
                padding-top: 36px;
                padding-bottom: 16px;
                spacing: 16px;

                HorizontalLayout {
                    spacing: 8px;
                    Text { text: "Name:"; vertical-alignment: center; font-weight: 600; color: #222222; }
                    StyledInput {
                        text <=> pet-name;
                        placeholder-text: "Enter pet name";
                        width: 200px;
                    }
                }

                HorizontalLayout {
                    spacing: 8px;
                    Text { text: "Happiness:"; vertical-alignment: center; font-weight: 600; color: #222222; }
                    Slider {
                        value <=> happiness;
                        minimum: 0;
                        maximum: 100;
                    }
                    Text { text: happiness + "%"; vertical-alignment: center; font-weight: 600; color: #222222; }
                }

                HorizontalLayout {
                    alignment: center;
                    spacing: 12px;

                    FeedButton {
                        feed-pet => {
                            happiness = min(100, happiness + 10);
                            message = "Yummy! Thank you!";
                        }
                    }

                    PlayButton {
                        play-with-pet => {
                            happiness = min(100, happiness + 15);
                            is-dancing = !is-dancing;
                            message = is-dancing ? "Wheee! I'm dancing!" : "That was fun!";
                        }
                    }

                    SleepButton {
                        put-to-sleep => {
                            happiness = min(100, happiness + 5);
                            message = "Zzz... *snort*";
                        }
                    }
                }
            }
        }

        // About section
        HorizontalLayout {
            alignment: center;
            Text {
                text: "Made with ";
                color: #222222;
                vertical-alignment: center;
            }
            Text {
                text: "â™¥";
                color: #ff6b6b;
                font-size: 18px;
                vertical-alignment: center;
            }
            Text {
                text: " using Slint";
                color: #222222;
                vertical-alignment: center;
            }
        }
    }
}
