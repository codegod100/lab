import { Button, VerticalBox, AboutSlint, ScrollView, LineEdit, GroupBox } from "std-widgets.slint";

// Custom styled input field
component StyledInput inherits Rectangle {
    in-out property <string> text;
    in property <string> placeholder-text;
    in property <bool> enabled: true;
    in property <bool> handle-enter: false;
    property <bool> has-focus: false;
    callback enter-pressed;

    height: 36px;
    border-radius: 6px;
    background: #ffffff;
    border-width: 1px;
    border-color: has-focus ? #6a5acd : #cccccc;
    drop-shadow-offset-x: 0px;
    drop-shadow-offset-y: has-focus ? 2px : 0px;
    drop-shadow-blur: has-focus ? 4px : 0px;
    drop-shadow-color: #6a5acd40;
    animate border-color { duration: 200ms; }
    animate drop-shadow-offset-y { duration: 200ms; }
    animate drop-shadow-blur { duration: 200ms; }

    input := TextInput {
        property <bool> empty: self.text == "";
        x: 10px;
        width: parent.width - 20px;
        height: parent.height;
        text <=> root.text;
        enabled: root.enabled;
        font-size: 14px;
        color: #333333;
        selection-foreground-color: white;
        selection-background-color: #6a5acd80;

        key-pressed(event) => {
            if (root.handle-enter && event.text == Key.Return) {
                root.enter-pressed();
                return accept;
            }
            return reject;
        }
    }

    // Update focus state
    states [
        has-focus when input.has-focus: {}
    ]

    if (input.empty && !input.has-focus): Text {
        x: 10px;
        y: 0;
        width: parent.width - 20px;
        height: parent.height;
        text: root.placeholder-text;
        color: #999999;
        font-size: 14px;
        vertical-alignment: center;
    }
}

// Button component
component ChatButton inherits Rectangle {
    callback clicked;
    in property <string> text;
    in property <brush> bg: #6a5acd;
    in property <brush> hover-bg: #5a4abd;
    in property <brush> pressed-bg: #4a3c9d;

    height: 36px;
    width: 120px;
    background: ta.pressed ? pressed-bg : ta.has-hover ? hover-bg : bg;
    border-radius: 18px;
    animate background { duration: 200ms; }

    Text {
        text: root.text;
        font-size: 14px;
        color: #ffffff;
        font-weight: 600;
    }

    ta := TouchArea {
        clicked => { root.clicked() }
    }
}

// Message bubble component
component MessageBubble inherits Rectangle {
    in property <string> text;
    in property <string> sender;
    in property <string> timestamp;
    in property <bool> is-self: false;

    height: 80px;

    // Bubble styling
    background: is-self ? #e1f3fb : #f0f0f0;
    border-radius: 12px;
    drop-shadow-offset-x: 0px;
    drop-shadow-offset-y: 1px;
    drop-shadow-blur: 3px;
    drop-shadow-color: #00000015;

    VerticalLayout {
        padding: 12px;
        spacing: 4px;

        // Sender name
        Text {
            text: sender;
            font-size: 12px;
            font-weight: 600;
            color: is-self ? #4a86e8 : #666666;
        }

        // Message text
        Text {
            text: root.text;
            font-size: 14px;
            color: #333333;
            wrap: word-wrap;
        }

        // Timestamp
        Text {
            text: timestamp;
            font-size: 10px;
            color: #999999;
            horizontal-alignment: right;
        }
    }
}

// Main application window
export component Demo inherits Window {
    title: "Chat App";
    width: 500px;
    height: 600px;
    background: #f8f8ff;

    // Scroll to bottom when the component is loaded
    init => {
        scroll-to-bottom();
    }

    // Chat data
    property <string> username: "User";
    property <string> current-message: "";
    property <[{sender: string, text: string, timestamp: string, is-self: bool}]> messages: [
        {sender: "System", text: "Welcome to the chat app!", timestamp: "Just now", is-self: false},
    ];

    // Auto-scroll to bottom when messages change
    callback scroll-to-bottom();

    // Function to add a new message
    callback send-message();

    // Implementation of scroll-to-bottom
    scroll-to-bottom => {
        chat-scroll-view.viewport-y = min(0px, -chat-scroll-view.viewport-height + chat-scroll-view.visible-height);
    }

    // Main layout
    VerticalLayout {
        padding: 24px;
        spacing: 16px;

        // Title
        Text {
            text: "Chat App";
            font-size: 24px;
            font-weight: 700;
            horizontal-alignment: center;
            color: #4a3c8c;
        }

        // Messages area
        Rectangle {
            border-radius: 16px;
            background: #ffffff;
            drop-shadow-offset-x: 0px;
            drop-shadow-offset-y: 2px;
            drop-shadow-blur: 6px;
            drop-shadow-color: #00000020;
            vertical-stretch: 1;

            chat-scroll-view := ScrollView {
                width: parent.width;
                height: parent.height;

                VerticalLayout {
                    padding: 16px;
                    spacing: 12px;
                    alignment: start;

                    for message in messages: MessageBubble {
                        width: 400px;
                        text: message.text;
                        sender: message.sender;
                        timestamp: message.timestamp;
                        is-self: message.is-self;
                    }
                }
            }
        }

        // Chat controls
        Rectangle {
            border-radius: 8px;
            background: #f0f0f0;
            drop-shadow-offset-x: 0px;
            drop-shadow-offset-y: 1px;
            drop-shadow-blur: 4px;
            drop-shadow-color: #00000020;
            vertical-stretch: 0;

            Text {
                x: 12px;
                y: 8px;
                text: "Chat Controls";
                font-weight: 700;
                color: #4a3c8c;
                font-size: 16px;
            }

            VerticalLayout {
                padding-left: 16px;
                padding-right: 16px;
                padding-top: 36px;
                padding-bottom: 16px;
                spacing: 16px;

                HorizontalLayout {
                    spacing: 8px;
                    Text {
                        text: "Your Name:";
                        vertical-alignment: center;
                        font-weight: 600;
                        color: #222222;
                    }
                    StyledInput {
                        text <=> username;
                        placeholder-text: "Enter your name";
                        width: 200px;
                    }
                }

                HorizontalLayout {
                    spacing: 8px;

                    StyledInput {
                        text <=> current-message;
                        placeholder-text: "Type your message...";
                        width: parent.width - 140px;
                        handle-enter: true;
                        enter-pressed => {
                            send-message();
                        }
                    }

                    ChatButton {
                        text: "Send";
                        width: 120px;
                        clicked => {
                            send-message();
                        }
                    }
                }
            }
        }

        // About section
        HorizontalLayout {
            alignment: center;
            Text {
                text: "Made with ";
                color: #222222;
                vertical-alignment: center;
            }
            Text {
                text: "â™¥";
                color: #ff6b6b;
                font-size: 18px;
                vertical-alignment: center;
            }
            Text {
                text: " using Slint";
                color: #222222;
                vertical-alignment: center;
            }
        }
    }

    // Implementation of send-message callback
    send-message => {
        if (current-message != "") {
            // In Slint, we need to create a new array with all messages
            // plus the new one, since we can't modify arrays in place

            // Add the new messages to the existing ones
            if (messages.length == 1) {
                // If there's only the welcome message, add the new messages
                messages = [
                    messages[0],
                    {sender: username, text: current-message, timestamp: "Just now", is-self: true},
                    {sender: "Bot", text: "Thanks for your message!", timestamp: "Just now", is-self: false}
                ];
            } else if (messages.length == 3) {
                // If there are already 3 messages (welcome + user + bot), add the new ones
                messages = [
                    messages[0],
                    messages[1],
                    messages[2],
                    {sender: username, text: current-message, timestamp: "Just now", is-self: true},
                    {sender: "Bot", text: "Thanks for your message!", timestamp: "Just now", is-self: false}
                ];
            } else if (messages.length == 5) {
                // If there are already 5 messages, add the new ones
                messages = [
                    messages[0],
                    messages[1],
                    messages[2],
                    messages[3],
                    messages[4],
                    {sender: username, text: current-message, timestamp: "Just now", is-self: true},
                    {sender: "Bot", text: "Thanks for your message!", timestamp: "Just now", is-self: false}
                ];
            } else {
                // For any other case, just add the new messages
                // This is a fallback and might not handle all cases
                messages = [
                    messages[0],
                    {sender: username, text: current-message, timestamp: "Just now", is-self: true},
                    {sender: "Bot", text: "Thanks for your message!", timestamp: "Just now", is-self: false}
                ];
            }

            // Clear the input field
            current-message = "";

            // Auto-scroll to the bottom of the chat
            // This ensures the latest messages are always visible
            scroll-to-bottom();
        }
    }
}
