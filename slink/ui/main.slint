import { Button, VerticalBox, AboutSlint, ScrollView, LineEdit, GroupBox } from "std-widgets.slint";

// Custom styled input field
component StyledInput inherits Rectangle {
    in-out property <string> text;
    in property <string> placeholder-text;
    in property <bool> enabled: true;
    in property <bool> handle-enter: false;
    property <bool> has-focus: false;
    callback enter-pressed;

    height: 36px;
    border-radius: 6px;
    background: #ffffff;
    border-width: 1px;
    border-color: has-focus ? #6a5acd : #cccccc;
    drop-shadow-offset-x: 0px;
    drop-shadow-offset-y: has-focus ? 2px : 0px;
    drop-shadow-blur: has-focus ? 4px : 0px;
    drop-shadow-color: #6a5acd40;
    animate border-color { duration: 200ms; }
    animate drop-shadow-offset-y { duration: 200ms; }
    animate drop-shadow-blur { duration: 200ms; }

    input := TextInput {
        property <bool> empty: self.text == "";
        x: 8px;
        y: 0px;
        width: parent.width - 16px;
        height: parent.height;
        text <=> root.text;
        enabled: root.enabled;
        font-size: 14px;
        color: #333333;
        selection-foreground-color: white;
        selection-background-color: #6a5acd80;
        horizontal-alignment: left;
        vertical-alignment: center;
        single-line: true;
        wrap: no-wrap;

        key-pressed(event) => {
            if (root.handle-enter && event.text == Key.Return) {
                root.enter-pressed();
                return accept;
            }
            return reject;
        }
    }

    // Update focus state
    states [
        has-focus when input.has-focus: {}
    ]

    if (input.empty && !input.has-focus): Text {
        x: 8px;
        y: 0;
        width: parent.width - 16px;
        height: parent.height;
        text: root.placeholder-text;
        color: #999999;
        font-size: 14px;
        vertical-alignment: center;
    }
}

// Button component
component ChatButton inherits Rectangle {
    callback clicked;
    in property <string> text;
    in property <brush> bg: #6a5acd;
    in property <brush> hover-bg: #5a4abd;
    in property <brush> pressed-bg: #4a3c9d;

    height: 36px;
    width: 120px;
    background: ta.pressed ? pressed-bg : ta.has-hover ? hover-bg : bg;
    border-radius: 18px;
    animate background { duration: 200ms; }

    Text {
        text: root.text;
        font-size: 14px;
        color: #ffffff;
        font-weight: 600;
    }

    ta := TouchArea {
        clicked => { root.clicked() }
    }
}

// Small icon button component
component IconButton inherits Rectangle {
    callback clicked;
    in property <string> icon-text;
    in property <brush> text-color: #6a5acd;
    in property <brush> hover-text-color: #5a4abd;
    in property <length> font-size: 14px;

    width: self.font-size * 1.5;
    height: self.font-size * 1.5;
    border-radius: self.width / 2;

    Text {
        text: root.icon-text;
        font-size: root.font-size;
        color: ta.has-hover ? root.hover-text-color : root.text-color;
        horizontal-alignment: center;
        vertical-alignment: center;
    }

    ta := TouchArea {
        clicked => { root.clicked() }
    }
}

// Message bubble component
component MessageBubble inherits Rectangle {
    in property <string> text;
    in property <string> sender;
    in property <string> timestamp;
    in property <bool> is-self: false;
    in property <int> message-id;
    in property <int> replied-to-id: -1;
    in property <string> replied-to-text: "";
    in property <string> replied-to-sender: "";
    callback reply-clicked(int);

    // Adjust height based on content
    height: replied-to-id >= 0 ? 110px : 80px;

    // Bubble styling
    background: is-self ? #e1f3fb : #f0f0f0;
    border-radius: 12px;
    drop-shadow-offset-x: 0px;
    drop-shadow-offset-y: 1px;
    drop-shadow-blur: 3px;
    drop-shadow-color: #00000015;

    VerticalLayout {
        padding: 12px;
        spacing: 4px;

        // Replied-to message (if any)
        if (replied-to-id >= 0): Rectangle {
            height: 30px;
            background: #00000010;
            border-radius: 6px;

            HorizontalLayout {
                padding: 4px;
                spacing: 4px;

                Rectangle {
                    width: 3px;
                    background: #6a5acd;
                    border-radius: 1.5px;
                }

                VerticalLayout {
                    spacing: 2px;

                    Text {
                        text: replied-to-sender;
                        font-size: 10px;
                        font-weight: 600;
                        color: #6a5acd;
                    }

                    Text {
                        text: replied-to-text;
                        font-size: 10px;
                        color: #666666;
                    }
                }
            }
        }

        // Sender name
        Text {
            text: sender;
            font-size: 12px;
            font-weight: 600;
            color: is-self ? #4a86e8 : #666666;
        }

        // Message text
        Text {
            text: root.text;
            font-size: 14px;
            color: #333333;
            wrap: word-wrap;
        }

        // Footer with timestamp and reply button
        HorizontalLayout {
            height: 16px;

            // Timestamp
            Text {
                text: timestamp;
                font-size: 10px;
                color: #999999;
                vertical-alignment: center;
            }

            // Spacer
            Rectangle { }

            // Reply button
            IconButton {
                icon-text: "â†©";
                font-size: 12px;
                text-color: #999999;
                hover-text-color: #6a5acd;
                clicked => {
                    root.reply-clicked(root.message-id);
                }
            }
        }
    }
}

// Main application window
export component Demo inherits Window {
    title: "Chat App";
    width: 500px;
    height: 600px;
    background: #f8f8ff;

    // Scroll to bottom when the component is loaded
    init => {
        scroll-to-bottom();
    }

    // Chat data
    property <string> username: "User";
    property <string> current-message: "";
    property <int> replying-to: -1; // ID of the message being replied to, -1 means not replying
    property <[{sender: string, text: string, timestamp: string, is-self: bool, id: int, replied-to-id: int, replied-to-text: string, replied-to-sender: string}]> messages: [
        {sender: "System", text: "Welcome to the chat app!", timestamp: "Just now", is-self: false, id: 0, replied-to-id: -1, replied-to-text: "", replied-to-sender: ""},
    ];

    // API data properties
    in-out property <string> api-url: "https://jsonplaceholder.typicode.com/posts/1";
    in-out property <string> api-data: "";
    in-out property <bool> is-loading: false;

    // Auto-scroll to bottom when messages change
    callback scroll-to-bottom();

    // Function to add a new message
    callback send-message();

    // Function to set which message is being replied to
    callback set-reply-to(int);

    // Function to fetch data from API
    callback fetch-api-data();

    // Function to add fetched data as a message
    callback add-api-data-as-message();

    // Helper properties to get message details by ID
    property <string> replied-to-sender: {
        if (replying-to < 0 || messages.length <= 0) { return ""; }
        if (messages[0].id == replying-to) { return messages[0].sender; }
        if (messages.length > 1 && messages[1].id == replying-to) { return messages[1].sender; }
        if (messages.length > 2 && messages[2].id == replying-to) { return messages[2].sender; }
        if (messages.length > 3 && messages[3].id == replying-to) { return messages[3].sender; }
        if (messages.length > 4 && messages[4].id == replying-to) { return messages[4].sender; }
        if (messages.length > 5 && messages[5].id == replying-to) { return messages[5].sender; }
        if (messages.length > 6 && messages[6].id == replying-to) { return messages[6].sender; }
        if (messages.length > 7 && messages[7].id == replying-to) { return messages[7].sender; }
        return "";
    }

    property <string> replied-to-text: {
        if (replying-to < 0 || messages.length <= 0) { return ""; }
        if (messages[0].id == replying-to) { return messages[0].text; }
        if (messages.length > 1 && messages[1].id == replying-to) { return messages[1].text; }
        if (messages.length > 2 && messages[2].id == replying-to) { return messages[2].text; }
        if (messages.length > 3 && messages[3].id == replying-to) { return messages[3].text; }
        if (messages.length > 4 && messages[4].id == replying-to) { return messages[4].text; }
        if (messages.length > 5 && messages[5].id == replying-to) { return messages[5].text; }
        if (messages.length > 6 && messages[6].id == replying-to) { return messages[6].text; }
        if (messages.length > 7 && messages[7].id == replying-to) { return messages[7].text; }
        return "";
    }

    // Implementation of scroll-to-bottom
    scroll-to-bottom => {
        chat-scroll-view.viewport-y = min(0px, -chat-scroll-view.viewport-height + chat-scroll-view.visible-height);
    }

    // Main layout
    VerticalLayout {
        padding: 24px;
        spacing: 16px;

        // Title
        Text {
            text: "Chat App";
            font-size: 24px;
            font-weight: 700;
            horizontal-alignment: center;
            color: #4a3c8c;
        }

        // Messages area
        Rectangle {
            border-radius: 16px;
            background: #ffffff;
            drop-shadow-offset-x: 0px;
            drop-shadow-offset-y: 2px;
            drop-shadow-blur: 6px;
            drop-shadow-color: #00000020;
            vertical-stretch: 1;

            chat-scroll-view := ScrollView {
                width: parent.width;
                height: parent.height;

                VerticalLayout {
                    padding: 16px;
                    spacing: 12px;
                    alignment: start;

                    for message in messages: MessageBubble {
                        width: 400px;
                        text: message.text;
                        sender: message.sender;
                        timestamp: message.timestamp;
                        is-self: message.is-self;
                        message-id: message.id;
                        replied-to-id: message.replied-to-id;
                        replied-to-text: message.replied-to-text;
                        replied-to-sender: message.replied-to-sender;
                        reply-clicked(id) => { root.set-reply-to(id); }
                    }
                }
            }
        }

        // Chat controls
        Rectangle {
            border-radius: 12px;
            background: #f0f0f0;
            drop-shadow-offset-x: 0px;
            drop-shadow-offset-y: 2px;
            drop-shadow-blur: 5px;
            drop-shadow-color: #00000025;
            vertical-stretch: 0;

            Text {
                x: 0;
                y: 8px;
                width: parent.width;
                text: "Chat Controls";
                font-weight: 700;
                color: #4a3c8c;
                font-size: 16px;
                horizontal-alignment: center;
            }

            VerticalLayout {
                padding-left: 16px;
                padding-right: 16px;
                padding-top: 36px;
                padding-bottom: 16px;
                spacing: 16px;

                HorizontalLayout {
                    spacing: 12px;
                    alignment: center;
                    Text {
                        text: "Your Name:";
                        vertical-alignment: center;
                        font-weight: 600;
                        color: #222222;
                    }
                    StyledInput {
                        text <=> username;
                        placeholder-text: "Enter your name";
                        width: 200px;
                        height: 40px;
                    }
                }

                // Show reply indicator if replying to a message
                if (replying-to >= 0): Rectangle {
                    height: 30px;
                    background: #00000010;
                    border-radius: 6px;

                    HorizontalLayout {
                        padding: 4px;
                        spacing: 4px;

                        Rectangle {
                            width: 3px;
                            background: #6a5acd;
                            border-radius: 1.5px;
                        }

                        VerticalLayout {
                            spacing: 2px;
                            width: parent.width - 40px;

                            // Use the replied-to message details from the root component
                            property <string> reply-sender: root.replied-to-sender;
                            property <string> reply-text: root.replied-to-text;

                            Text {
                                text: "Replying to " + parent.reply-sender;
                                font-size: 10px;
                                font-weight: 600;
                                color: #6a5acd;
                            }

                            Text {
                                text: parent.reply-text;
                                font-size: 10px;
                                color: #666666;
                            }
                        }

                        Rectangle {
                            width: 20px;
                            height: 20px;

                            // Cancel reply button
                            IconButton {
                                icon-text: "Ã—";
                                font-size: 14px;
                                text-color: #999999;
                                hover-text-color: #ff6b6b;
                                clicked => {
                                    root.replying-to = -1;
                                }
                            }
                        }
                    }
                }

                HorizontalLayout {
                    spacing: 12px;
                    alignment: center;

                    StyledInput {
                        text <=> current-message;
                        placeholder-text: "Type your message...";
                        width: parent.width - 144px - 120px - 12px;
                        height: 40px;
                        handle-enter: true;
                        enter-pressed => {
                            send-message();
                        }
                    }

                    ChatButton {
                        text: "Send";
                        width: 120px;
                        height: 40px;
                        clicked => {
                            send-message();
                        }
                    }

                    ChatButton {
                        text: is-loading ? "Loading..." : "Fetch Data";
                        width: 120px;
                        height: 40px;
                        bg: #4a86e8;
                        hover-bg: #3a76d8;
                        pressed-bg: #2a66c8;
                        clicked => {
                            fetch-api-data();
                        }
                    }
                }
            }
        }

        // About section
        HorizontalLayout {
            alignment: center;
            Text {
                text: "Made with ";
                color: #222222;
                vertical-alignment: center;
            }
            Text {
                text: "â™¥";
                color: #ff6b6b;
                font-size: 18px;
                vertical-alignment: center;
            }
            Text {
                text: " using Slint";
                color: #222222;
                vertical-alignment: center;
            }
        }
    }

    // Implementation of set-reply-to callback
    set-reply-to(id) => {
        replying-to = id;
    }

    // Implementation of send-message callback
    send-message => {
        if (current-message != "") {
            // In Slint, we need to create a new array with all messages
            // plus the new one, since we can't modify arrays in place

            // Add the new messages to the existing ones
            if (messages.length == 1) {
                // If there's only the welcome message, add the new messages
                messages = [
                    messages[0],
                    {
                        sender: username,
                        text: current-message,
                        timestamp: "Just now",
                        is-self: true,
                        id: 1,
                        replied-to-id: replying-to,
                        replied-to-text: replied-to-text,
                        replied-to-sender: replied-to-sender
                    },
                    {
                        sender: "Bot",
                        text: "Thanks for your message!",
                        timestamp: "Just now",
                        is-self: false,
                        id: 2,
                        replied-to-id: -1,
                        replied-to-text: "",
                        replied-to-sender: ""
                    }
                ];
            } else if (messages.length == 3) {
                // If there are already 3 messages (welcome + user + bot), add the new ones
                messages = [
                    messages[0],
                    messages[1],
                    messages[2],
                    {
                        sender: username,
                        text: current-message,
                        timestamp: "Just now",
                        is-self: true,
                        id: 3,
                        replied-to-id: replying-to,
                        replied-to-text: replied-to-text,
                        replied-to-sender: replied-to-sender
                    },
                    {
                        sender: "Bot",
                        text: "Thanks for your message!",
                        timestamp: "Just now",
                        is-self: false,
                        id: 4,
                        replied-to-id: -1,
                        replied-to-text: "",
                        replied-to-sender: ""
                    }
                ];
            } else if (messages.length == 5) {
                // If there are already 5 messages, add the new ones
                messages = [
                    messages[0],
                    messages[1],
                    messages[2],
                    messages[3],
                    messages[4],
                    {
                        sender: username,
                        text: current-message,
                        timestamp: "Just now",
                        is-self: true,
                        id: 5,
                        replied-to-id: replying-to,
                        replied-to-text: replied-to-text,
                        replied-to-sender: replied-to-sender
                    },
                    {
                        sender: "Bot",
                        text: "Thanks for your message!",
                        timestamp: "Just now",
                        is-self: false,
                        id: 6,
                        replied-to-id: -1,
                        replied-to-text: "",
                        replied-to-sender: ""
                    }
                ];
            } else if (messages.length == 7) {
                // If there are already 7 messages, add the new ones
                messages = [
                    messages[0],
                    messages[1],
                    messages[2],
                    messages[3],
                    messages[4],
                    messages[5],
                    messages[6],
                    {
                        sender: username,
                        text: current-message,
                        timestamp: "Just now",
                        is-self: true,
                        id: 7,
                        replied-to-id: replying-to,
                        replied-to-text: replied-to-text,
                        replied-to-sender: replied-to-sender
                    },
                    {
                        sender: "Bot",
                        text: "Thanks for your message!",
                        timestamp: "Just now",
                        is-self: false,
                        id: 8,
                        replied-to-id: -1,
                        replied-to-text: "",
                        replied-to-sender: ""
                    }
                ];
            } else {
                // For any other case, just add the new messages
                // This is a fallback and might not handle all cases
                messages = [
                    messages[0],
                    {
                        sender: username,
                        text: current-message,
                        timestamp: "Just now",
                        is-self: true,
                        id: messages.length,
                        replied-to-id: replying-to,
                        replied-to-text: replied-to-text,
                        replied-to-sender: replied-to-sender
                    },
                    {
                        sender: "Bot",
                        text: "Thanks for your message!",
                        timestamp: "Just now",
                        is-self: false,
                        id: messages.length + 1,
                        replied-to-id: -1,
                        replied-to-text: "",
                        replied-to-sender: ""
                    }
                ];
            }

            // Clear the input field and reset reply state
            current-message = "";
            replying-to = -1;

            // Auto-scroll to the bottom of the chat
            // This ensures the latest messages are always visible
            scroll-to-bottom();
        }
    }

    // Implementation of add-api-data-as-message callback
    add-api-data-as-message => {
        if (api-data != "") {
            // Add the API data as a new message
            // We need to create a new array with all existing messages plus the new one

            // Create a new array with all existing messages
            if (messages.length == 1) {
                messages = [
                    messages[0],
                    {
                        sender: "API",
                        text: api-data,
                        timestamp: "Just now",
                        is-self: false,
                        id: 1,
                        replied-to-id: -1,
                        replied-to-text: "",
                        replied-to-sender: ""
                    }
                ];
            } else if (messages.length == 2) {
                messages = [
                    messages[0],
                    messages[1],
                    {
                        sender: "API",
                        text: api-data,
                        timestamp: "Just now",
                        is-self: false,
                        id: 2,
                        replied-to-id: -1,
                        replied-to-text: "",
                        replied-to-sender: ""
                    }
                ];
            } else {
                // For any other case, just add the new message
                // This is a fallback and might not handle all cases
                messages = [
                    messages[0],
                    messages[1],
                    {
                        sender: "API",
                        text: api-data,
                        timestamp: "Just now",
                        is-self: false,
                        id: messages.length,
                        replied-to-id: -1,
                        replied-to-text: "",
                        replied-to-sender: ""
                    }
                ];
            }

            // Auto-scroll to the bottom of the chat
            scroll-to-bottom();
        }
    }
}
