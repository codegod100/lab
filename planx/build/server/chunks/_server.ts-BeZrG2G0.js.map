{"version":3,"file":"_server.ts-BeZrG2G0.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/api/db/_server.ts.js"],"sourcesContent":["import { sql, eq } from \"drizzle-orm\";\nimport { drizzle } from \"drizzle-orm/libsql\";\nimport { sqliteTable, text, integer } from \"drizzle-orm/sqlite-core\";\nimport \"@std/dotenv/load\";\nimport { d as private_env } from \"../../../../chunks/shared-server.js\";\nconst itemTypes = [\"note\", \"todo\", \"bookmark\", \"event\"];\nconst items = sqliteTable(\"items\", {\n  // Common fields for all item types\n  id: text(\"id\").primaryKey(),\n  // Corresponds to crypto.randomUUID()\n  type: text(\"type\", { enum: itemTypes }).notNull(),\n  // Discriminator column\n  content: text(\"content\").notNull(),\n  // Holds note content, todo description, bookmark URL, event description\n  createdAt: integer(\"created_at\", { mode: \"timestamp_ms\" }).notNull().default(sql`(unixepoch('subsec') * 1000)`),\n  // Default to current time in ms\n  context: text(\"context\"),\n  // Optional context/category for filtering\n  // Fields specific to certain types (nullable)\n  completed: integer(\"completed\", { mode: \"boolean\" }),\n  // For 'todo' items (SQLite uses 0/1 for boolean)\n  start: text(\"start\"),\n  // For 'event' items (stores ISO string or datetime-local value)\n  // Add 'end' if you implement event end times:\n  // end: text('end'),\n  url: text(\"url\"),\n  // For 'bookmark' items, stores the URL separately\n  imageData: text(\"image_data\"),\n  // For storing binary image data, primarily for notes\n  imageMimeType: text(\"image_mime_type\")\n  // For storing the MIME type of the image\n});\nconst db = drizzle({\n  connection: {\n    url: private_env.TURSO_DATABASE_URL,\n    authToken: private_env.TURSO_AUTH_TOKEN\n  }\n});\nconst POST = async ({ request }) => {\n  const data = await request.json();\n  if (data.type === \"note\" && data.imageData) {\n    console.log(\"Received note with image data type:\", typeof data.imageData);\n    console.log(\"Image data length:\", data.imageData.length);\n  }\n  const inserted = await db.insert(items).values(data).returning();\n  return Response.json(inserted[0]);\n};\nconst GET = async () => {\n  const allItems = await db.select().from(items);\n  const processedItems = allItems.map((item) => {\n    console.log({ item });\n    return {\n      ...item,\n      imageData: item.imageData\n    };\n  });\n  return Response.json(processedItems);\n};\nconst DELETE = async ({ url }) => {\n  try {\n    const id = url.searchParams.get(\"id\");\n    if (!id) {\n      return new Response(\"Missing id parameter\", { status: 400 });\n    }\n    const deleted = await db.delete(items).where(eq(items.id, id)).returning();\n    if (deleted.length === 0) {\n      return new Response(\"Item not found\", { status: 404 });\n    }\n    return Response.json({ success: true });\n  } catch (error) {\n    console.error(\"Error deleting item:\", error);\n    return new Response(\"Failed to delete item\", { status: 500 });\n  }\n};\nconst PATCH = async ({ request }) => {\n  try {\n    const data = await request.json();\n    const { id, ...fieldsToUpdate } = data;\n    if (!id) {\n      return new Response(\"Missing id in request body\", { status: 400 });\n    }\n    if (Object.keys(fieldsToUpdate).length === 0) {\n      return new Response(\"No fields to update\", { status: 400 });\n    }\n    if (data.type === \"note\" && \"imageData\" in fieldsToUpdate) {\n      console.log(\"PATCH: Image data type:\", typeof fieldsToUpdate.imageData);\n      if (fieldsToUpdate.imageData) {\n        console.log(\n          \"PATCH: Image data length:\",\n          fieldsToUpdate.imageData.length\n        );\n      } else {\n        console.log(\"PATCH: Image data is null or undefined\");\n      }\n    }\n    const updated = await db.update(items).set(fieldsToUpdate).where(eq(items.id, id)).returning();\n    if (updated.length === 0) {\n      return new Response(\"Item not found\", { status: 404 });\n    }\n    return Response.json(updated[0]);\n  } catch (error) {\n    console.error(\"Error updating item:\", error);\n    return new Response(\"Failed to update item\", { status: 500 });\n  }\n};\nexport {\n  DELETE,\n  GET,\n  PATCH,\n  POST\n};\n"],"names":[],"mappings":";;;;;;AAKA,MAAM,SAAS,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC;AACvD,MAAM,KAAK,GAAG,WAAW,CAAC,OAAO,EAAE;AACnC;AACA,EAAE,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE;AAC7B;AACA,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC,OAAO,EAAE;AACnD;AACA,EAAE,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE;AACpC;AACA,EAAE,SAAS,EAAE,OAAO,CAAC,YAAY,EAAE,EAAE,IAAI,EAAE,cAAc,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;AACjH;AACA,EAAE,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC;AAC1B;AACA;AACA,EAAE,SAAS,EAAE,OAAO,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;AACtD;AACA,EAAE,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC;AACtB;AACA;AACA;AACA,EAAE,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC;AAClB;AACA,EAAE,SAAS,EAAE,IAAI,CAAC,YAAY,CAAC;AAC/B;AACA,EAAE,aAAa,EAAE,IAAI,CAAC,iBAAiB;AACvC;AACA,CAAC,CAAC;AACF,MAAM,EAAE,GAAG,OAAO,CAAC;AACnB,EAAE,UAAU,EAAE;AACd,IAAI,GAAG,EAAE,WAAW,CAAC,kBAAkB;AACvC,IAAI,SAAS,EAAE,WAAW,CAAC;AAC3B;AACA,CAAC,CAAC;AACG,MAAC,IAAI,GAAG,OAAO,EAAE,OAAO,EAAE,KAAK;AACpC,EAAE,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,IAAI,EAAE;AACnC,EAAE,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,IAAI,IAAI,CAAC,SAAS,EAAE;AAC9C,IAAI,OAAO,CAAC,GAAG,CAAC,qCAAqC,EAAE,OAAO,IAAI,CAAC,SAAS,CAAC;AAC7E,IAAI,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;AAC5D;AACA,EAAE,MAAM,QAAQ,GAAG,MAAM,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE;AAClE,EAAE,OAAO,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AACnC;AACK,MAAC,GAAG,GAAG,YAAY;AACxB,EAAE,MAAM,QAAQ,GAAG,MAAM,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;AAChD,EAAE,MAAM,cAAc,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK;AAChD,IAAI,OAAO,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,CAAC;AACzB,IAAI,OAAO;AACX,MAAM,GAAG,IAAI;AACb,MAAM,SAAS,EAAE,IAAI,CAAC;AACtB,KAAK;AACL,GAAG,CAAC;AACJ,EAAE,OAAO,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC;AACtC;AACK,MAAC,MAAM,GAAG,OAAO,EAAE,GAAG,EAAE,KAAK;AAClC,EAAE,IAAI;AACN,IAAI,MAAM,EAAE,GAAG,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC;AACzC,IAAI,IAAI,CAAC,EAAE,EAAE;AACb,MAAM,OAAO,IAAI,QAAQ,CAAC,sBAAsB,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC;AAClE;AACA,IAAI,MAAM,OAAO,GAAG,MAAM,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,EAAE;AAC9E,IAAI,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;AAC9B,MAAM,OAAO,IAAI,QAAQ,CAAC,gBAAgB,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC;AAC5D;AACA,IAAI,OAAO,QAAQ,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;AAC3C,GAAG,CAAC,OAAO,KAAK,EAAE;AAClB,IAAI,OAAO,CAAC,KAAK,CAAC,sBAAsB,EAAE,KAAK,CAAC;AAChD,IAAI,OAAO,IAAI,QAAQ,CAAC,uBAAuB,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC;AACjE;AACA;AACK,MAAC,KAAK,GAAG,OAAO,EAAE,OAAO,EAAE,KAAK;AACrC,EAAE,IAAI;AACN,IAAI,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,IAAI,EAAE;AACrC,IAAI,MAAM,EAAE,EAAE,EAAE,GAAG,cAAc,EAAE,GAAG,IAAI;AAC1C,IAAI,IAAI,CAAC,EAAE,EAAE;AACb,MAAM,OAAO,IAAI,QAAQ,CAAC,4BAA4B,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC;AACxE;AACA,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;AAClD,MAAM,OAAO,IAAI,QAAQ,CAAC,qBAAqB,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC;AACjE;AACA,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,IAAI,WAAW,IAAI,cAAc,EAAE;AAC/D,MAAM,OAAO,CAAC,GAAG,CAAC,yBAAyB,EAAE,OAAO,cAAc,CAAC,SAAS,CAAC;AAC7E,MAAM,IAAI,cAAc,CAAC,SAAS,EAAE;AACpC,QAAQ,OAAO,CAAC,GAAG;AACnB,UAAU,2BAA2B;AACrC,UAAU,cAAc,CAAC,SAAS,CAAC;AACnC,SAAS;AACT,OAAO,MAAM;AACb,QAAQ,OAAO,CAAC,GAAG,CAAC,wCAAwC,CAAC;AAC7D;AACA;AACA,IAAI,MAAM,OAAO,GAAG,MAAM,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,EAAE;AAClG,IAAI,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;AAC9B,MAAM,OAAO,IAAI,QAAQ,CAAC,gBAAgB,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC;AAC5D;AACA,IAAI,OAAO,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AACpC,GAAG,CAAC,OAAO,KAAK,EAAE;AAClB,IAAI,OAAO,CAAC,KAAK,CAAC,sBAAsB,EAAE,KAAK,CAAC;AAChD,IAAI,OAAO,IAAI,QAAQ,CAAC,uBAAuB,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC;AACjE;AACA;;;;"}